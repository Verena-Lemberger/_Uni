explainer_titanic_h2o <- DALEX::explain(
model_h2o,
data = data_x,
y = data_y,
predict_function = custom_predict_h2o,
label = "MLP_h2o",
colorize = F,
type = "classification")
custom_predict_keras <- function(model, newdata)  {
res <- as.data.frame(predict(model, newdata))
return(res$V1)
}
explainer_titanic_keras <- DALEX::explain(
model = model_keras,
data = titanic_small_x,
y = as.numeric(titanic_small_y),
predict_function = custom_predict_keras,
label = "MLP_keras",
colorize = FALSE,
type = "classification")
custom_predict_tree <- function(model, newdata)  {
res <- predict(model, newdata)
return(res$.pred)
}
explainer_titanic_tree <- DALEX::explain(
model_bt_fitted,
data = data_tree,
y = data_tree$Survived,
predict_function = custom_predict_tree,
label = "MLP_Tree",
colorize = F,
type = "classification"
)
mp_titanic_h2o <- model_performance(explainer_titanic_h2o)
mp_titanic_keras <- model_performance(explainer_titanic_keras)
mp_titanic_tree <- model_performance(explainer_titanic_tree)
print(mp_titanic_h2o)
print(mp_titanic_keras)
print(mp_titanic_tree)
plot(mp_titanic_h2o, mp_titanic_keras, mp_titanic_tree)
plot(mp_titinic_h2o, mp_titanic_keras, mp_titanic_tree, geom = "boxplot")
plot(vi_titanic_h2o, vi_titanic_keras)
plot(vi_titanic_h2o)
vi_titanic_h2o <- variable_importance(explainer_titanic_h2o)
vi_titanic_keras <- variable_importance(explainer_titanic_h2o)
vi_titanic_tree <- variable_importance(explainer_titanic_tree)
plot(vi_titanic_h2o)
plot(vi_titanic_keras)
plot(vi_titanic_tree)
vi_titinic_h2o <- variable_importance(explainer_titanic_h2o, type="difference")
vi_titinic_keras <- variable_importance(explainer_titanic_keras, type="difference")
vi_titanic_tree <- variable_importance(explainer_titanic_tree, type="difference")
plot(vi_titinic_h2o, vi_titinic_keras, vi_titanic_tree)
vr_age_h2o  <- variable_effect(explainer_titanic_h2o, variable =  "Age")
vr_age_keras  <- variable_effect(explainer_titanic_keras, variable =  "Age")
vr_age_tree <- variable_effect(explainer_titanic_tree, variable="Age")
plot(vr_age_h2o, vr_age_keras, vr_age_tree)
vr_age_h2o <- variable_effect_accumulated_dependency(explainer_titanic_h2o, variables =  c("Pclass", "Fare"))
vr_age_keras <- variable_effect_accumulated_dependency(explainer_titanic_keras, variables =  c("Pclass", "Fare"))
vr_age_tree <- variable_effect_accumulated_dependency(explainer_titanic_tree, variables =  c("Pclass", "Fare"))
plot(vr_age_h2o, vr_age_keras, vr_age_tree)
vr_age_h2o <- variable_effect_accumulated_dependency(explainer_titanic_h2o, variables =  c("Pclass", "Fare"), type = "accumulated")
vr_age_h2o <- variable_effect_accumulated_dependency(explainer_titanic_h2o, variables =  c("Pclass", "Fare"))
vr_age_keras <- variable_effect_accumulated_dependency(explainer_titanic_keras, variables =  c("Pclass", "Fare"))
vr_age_tree <- variable_effect_accumulated_dependency(explainer_titanic_tree, variables =  c("Pclass", "Fare"))
plot(vr_age_h2o, vr_age_keras, vr_age_tree)
henry
henry_keras
breakdown_h2o <- variable_attribution(explainer_titanic_h2o, new_observation = henry, type = "break_down")
breakdown_keras <- variable_attribution(explainer_titanic_keras, new_observation = henry_keras, type = "break_down")
breakdown_tree <- variable_attribution(explainer_titanic_tree, new_observation = henry, type = "break_down")
plot(breakdown_h2o)
plot(breakdown_keras)
plot(breakdown_tree)
titanic_small_x
henry_keras
henry_keras <- as.matrix(henry)
pred_keras <- predict(model_keras, henry_keras)
round(as.data.frame(pred_keras))
pred_keras <- predict(model_keras, henry_keras)
round(as.data.frame(pred_keras))
henry_keras
henry_h2o <- as.h2o(henry, destination_frame = "henry")
henry_keras <- as.matrix(henry)
pred_h2o <- predict(model_h2o, henry_h2o)
as.data.frame(pred_h2o)
henry_keras
pred_keras <- predict(model_keras, henry_keras)
round(as.data.frame(pred_keras))
pred_keras <- predict(model_keras, henry_keras)
round(as.data.frame(pred_keras))
custom_predict_keras <- function(model, newdata)  {
res <- as.data.frame(predict(model, newdata))
return(res$V1)
}
explainer_titanic_keras <- DALEX::explain(
model = model_keras,
data = titanic_small_x,
y = as.numeric(titanic_small_y),
predict_function = custom_predict_keras,
label = "MLP_keras",
colorize = FALSE,
type = "classification")
breakdown_keras <- variable_attribution(explainer_titanic_keras, new_observation = henry, type = "break_down")
_
_
_
_
pred_keras <- predict(model_keras, henry_keras)
custom_predict_keras <- function(model, newdata)  {
res <- as.data.frame(predict(model, newdata))
return(res$V1)
}
explainer_titanic_keras <- DALEX::explain(
model = model_keras,
data = titanic_small_x,
y = as.numeric(titanic_small_y),
predict_function = custom_predict_keras,
label = "MLP_keras",
colorize = FALSE,
type = "classification")
breakdown_keras <- variable_attribution(explainer_titanic_keras, new_observation = henry_keras, type = "break_down")
plot(breakdown_keras)
henry_keras_2 <- henry
henry_keras_2
breakdown_keras <- variable_attribution(explainer_titanic_keras, new_observation = data.matrix(henry_keras_2), type = "break_down")
plot(breakdown_keras)
titanic_small_x
henry_keras_2
henry_keras_2 <- henry <- data.frame(
Pclass = 1,
Family_members = 0,
Age = 8,
Fare = 72,
Sex_male = 1,
Sex_female = 0,
Embarked_S = 0,
Embarked_C = 1,
Embarked_Q = 0,
Embarked_ = 0
)
henry_keras_2 <- data.matrix(data.frame(
Pclass = 1,
Family_members = 0,
Age = 8,
Fare = 72,
Sex_male = 1,
Sex_female = 0,
Embarked_S = 0,
Embarked_C = 1,
Embarked_Q = 0,
Embarked_ = 0
))
titanic_small_x
henry_keras_2
breakdown_h2o <- variable_attribution(explainer_titanic_h2o, new_observation = henry, type = "break_down")
breakdown_keras <- variable_attribution(explainer_titanic_keras, new_observation = data.matrix(henry_keras_2), type = "break_down")
breakdown_tree <- variable_attribution(explainer_titanic_tree, new_observation = henry, type = "break_down")
plot(breakdown_h2o)
plot(breakdown_keras)
plot(breakdown_tree)
breakdown_h2o <- variable_attribution(explainer_titanic_h2o, new_observation = henry, type = "break_down")
breakdown_keras <- variable_attribution(explainer_titanic_keras, new_observation = henry_keras, type = "break_down")
breakdown_tree <- variable_attribution(explainer_titanic_tree, new_observation = henry, type = "break_down")
plot(breakdown_h2o)
plot(breakdown_keras)
plot(breakdown_tree)
knitr::opts_chunk$set(fig.align = "center")
library(DALEX)
library(dplyr)
library(tidyr)
library(fastDummies)
library(tidyverse)
library(h2o)
library(caret)
library(tidymodels)
# install_github('rstudio/reticulate',force=T)
# devtools::install_github("rstudio/keras")
library(devtools)
library(reticulate)
library(tensorflow)
# install_tensorflow(version = "1.12")
library(keras)
# keras::install_keras()
set.seed(123)
titanic_small = read.csv("data/train.csv")
data <- titanic_small %>%
select(Survived, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked) %>%
mutate_at(c("Survived", "Sex", "Embarked"), as.factor) %>%
mutate(Family_members = SibSp + Parch) %>%
na.omit() %>%
dummy_cols() %>%
select(-Sex, -Embarked, -Survived_0, -Survived_1, -Parch, -SibSp)
str(data)
titanic_small_y <- data %>% select(Survived) %>% mutate(Survived = as.numeric(as.character(Survived))) %>% as.matrix()
titanic_small_x <- data %>% select(-Survived) %>% as.matrix()
h2o::h2o.init()
h2o::h2o.no_progress()
titanic_h2o <- as.h2o(data, destination_frame = "titanic_small")
model_h2o <- h2o.deeplearning(
x = 2:11,
y = 1,
training_frame = "titanic_small",
activation = "Rectifier",
hidden = c(16, 8),
epochs = 100,
rate = 0.01,
adaptive_rate = FALSE,
loss = 'CrossEntropy',
)
# Again use 16,8 hidden neurons, use ReLU, and the "same parameters" as h2o.
model_keras <- keras_model_sequential() %>% #
layer_dense(units = 16, activation = "relu", input_shape = c(10)) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid") # for classification
model_keras %>% compile(
optimizer = optimizer_sgd(lr = 0.01),
loss = "binary_crossentropy",
metrics = c("accuracy")
)
history <- model_keras %>% fit(
titanic_small_x,
titanic_small_y,
epochs = 100,
validation_split = 0.20,
verbose = 0 # set to 1 to get show the output and the us/step metric
)
model_bt<- boost_tree(
mode = "regression", # must be regression not classification so the explainer can calculate additional metrics
trees = 100,
learn_rate = 0.01,
)
data_tree <- as.data.frame(data.matrix(data))
model_bt_fitted <- model_bt %>% set_engine("xgboost") %>% fit(Survived ~ ., data = data_tree)
henry <- data.frame(
Pclass = 1,
Age = 8,
Family_members = 0,
Fare = 72,
Sex_male = 1,
Sex_female = 0,
Embarked_S = 0,
Embarked_C = 1,
Embarked_Q = 0,
Embarked_ = 0
)
henry_h2o <- as.h2o(henry, destination_frame = "henry")
henry_keras <- as.matrix(henry)
pred_h2o <- predict(model_h2o, henry_h2o)
as.data.frame(pred_h2o)
pred_keras <- predict(model_keras, henry_keras)
round(as.data.frame(pred_keras))
predict_tree <- predict(model_bt_fitted, henry)
round(predict_tree)
custom_predict_h2o <- function(model, newdata)  {
newdata_h2o <- as.h2o(newdata)
res <- as.data.frame(h2o.predict(model, newdata_h2o))
return(as.numeric(res$p1))
}
data_x <- data[ , -1]
data_y <- as.numeric(as.character(data$Survived))
explainer_titanic_h2o <- DALEX::explain(
model_h2o,
data = data_x,
y = data_y,
predict_function = custom_predict_h2o,
label = "MLP_h2o",
colorize = F,
type = "classification")
custom_predict_keras <- function(model, newdata)  {
res <- as.data.frame(predict(model, newdata))
return(res$V1)
}
explainer_titanic_keras <- DALEX::explain(
model = model_keras,
data = titanic_small_x,
y = as.numeric(titanic_small_y),
predict_function = custom_predict_keras,
label = "MLP_keras",
colorize = FALSE,
type = "classification")
custom_predict_tree <- function(model, newdata)  {
res <- predict(model, newdata)
return(res$.pred)
}
explainer_titanic_tree <- DALEX::explain(
model_bt_fitted,
data = data_tree,
y = data_tree$Survived,
predict_function = custom_predict_tree,
label = "MLP_Tree",
colorize = F,
type = "classification"
)
mp_titanic_h2o <- model_performance(explainer_titanic_h2o)
mp_titanic_keras <- model_performance(explainer_titanic_keras)
mp_titanic_tree <- model_performance(explainer_titanic_tree)
print(mp_titanic_h2o)
print(mp_titanic_keras)
print(mp_titanic_tree)
plot(mp_titanic_h2o, mp_titanic_keras, mp_titanic_tree)
plot(mp_titanic_h2o, mp_titanic_keras, mp_titanic_tree, geom = "boxplot")
vi_titanic_h2o <- variable_importance(explainer_titanic_h2o)
vi_titanic_keras <- variable_importance(explainer_titanic_h2o)
set.seed(123)
titanic_small = read.csv("data/train.csv")
data <- titanic_small %>%
select(Survived, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked) %>%
mutate_at(c("Survived", "Sex", "Embarked"), as.factor) %>%
mutate(Family_members = SibSp + Parch) %>%
na.omit() %>%
dummy_cols() %>%
select(-Sex, -Embarked, -Survived_0, -Survived_1, -Parch, -SibSp)
knitr::opts_chunk$set(fig.align = "center")
library(DALEX)
library(dplyr)
library(tidyr)
library(fastDummies)
library(tidyverse)
library(h2o)
library(caret)
library(tidymodels)
# install_github('rstudio/reticulate',force=T)
# devtools::install_github("rstudio/keras")
library(devtools)
library(reticulate)
library(tensorflow)
# install_tensorflow(version = "1.12")
library(keras)
# keras::install_keras()
set.seed(123)
titanic_small = read.csv("data/train.csv")
data <- titanic_small %>%
select(Survived, Pclass, Sex, Age, SibSp, Parch, Fare, Embarked) %>%
mutate_at(c("Survived", "Sex", "Embarked"), as.factor) %>%
mutate(Family_members = SibSp + Parch) %>%
na.omit() %>%
dummy_cols() %>%
select(-Sex, -Embarked, -Survived_0, -Survived_1, -Parch, -SibSp)
str(data)
set.seed(123)
titanic_small_y <- data %>% select(Survived) %>% mutate(Survived = as.numeric(as.character(Survived))) %>% as.matrix()
titanic_small_x <- data %>% select(-Survived) %>% as.matrix()
set.seed(123)
h2o::h2o.init()
h2o::h2o.no_progress()
titanic_h2o <- as.h2o(data, destination_frame = "titanic_small")
model_h2o <- h2o.deeplearning(
x = 2:11,
y = 1,
training_frame = "titanic_small",
activation = "Rectifier",
hidden = c(16, 8),
epochs = 100,
rate = 0.01,
adaptive_rate = FALSE,
loss = 'CrossEntropy',
)
set.seed(123)
# Again use 16,8 hidden neurons, use ReLU, and the "same parameters" as h2o.
model_keras <- keras_model_sequential() %>% #
layer_dense(units = 16, activation = "relu", input_shape = c(10)) %>%
layer_dense(units = 8, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid") # for classification
model_keras %>% compile(
optimizer = optimizer_sgd(lr = 0.01),
loss = "binary_crossentropy",
metrics = c("accuracy")
)
history <- model_keras %>% fit(
titanic_small_x,
titanic_small_y,
epochs = 100,
validation_split = 0.20,
verbose = 0 # set to 1 to get show the output and the us/step metric
)
set.seed(123)
model_bt<- boost_tree(
mode = "regression", # must be regression not classification so the explainer can calculate additional metrics
trees = 100,
learn_rate = 0.01,
)
data_tree <- as.data.frame(data.matrix(data))
model_bt_fitted <- model_bt %>% set_engine("xgboost") %>% fit(Survived ~ ., data = data_tree)
henry <- data.frame(
Pclass = 1,
Age = 8,
Family_members = 0,
Fare = 72,
Sex_male = 1,
Sex_female = 0,
Embarked_S = 0,
Embarked_C = 1,
Embarked_Q = 0,
Embarked_ = 0
)
set.seed(123)
henry_h2o <- as.h2o(henry, destination_frame = "henry")
henry_keras <- as.matrix(henry)
set.seed(123)
pred_h2o <- predict(model_h2o, henry_h2o)
as.data.frame(pred_h2o)
set.seed(123)
pred_keras <- predict(model_keras, henry_keras)
round(as.data.frame(pred_keras))
set.seed(123)
predict_tree <- predict(model_bt_fitted, henry)
round(predict_tree)
custom_predict_h2o <- function(model, newdata)  {
newdata_h2o <- as.h2o(newdata)
res <- as.data.frame(h2o.predict(model, newdata_h2o))
return(as.numeric(res$p1))
}
data_x <- data[ , -1]
data_y <- as.numeric(as.character(data$Survived))
explainer_titanic_h2o <- DALEX::explain(
model_h2o,
data = data_x,
y = data_y,
predict_function = custom_predict_h2o,
label = "MLP_h2o",
colorize = F,
type = "classification")
custom_predict_keras <- function(model, newdata)  {
res <- as.data.frame(predict(model, newdata))
return(res$V1)
}
explainer_titanic_keras <- DALEX::explain(
model = model_keras,
data = titanic_small_x,
y = as.numeric(titanic_small_y),
predict_function = custom_predict_keras,
label = "MLP_keras",
colorize = FALSE,
type = "classification")
custom_predict_tree <- function(model, newdata)  {
res <- predict(model, newdata)
return(res$.pred)
}
explainer_titanic_tree <- DALEX::explain(
model_bt_fitted,
data = data_tree,
y = data_tree$Survived,
predict_function = custom_predict_tree,
label = "MLP_Tree",
colorize = F,
type = "classification"
)
mp_titanic_h2o <- model_performance(explainer_titanic_h2o)
mp_titanic_keras <- model_performance(explainer_titanic_keras)
mp_titanic_tree <- model_performance(explainer_titanic_tree)
print(mp_titanic_h2o)
print(mp_titanic_keras)
print(mp_titanic_tree)
plot(mp_titanic_h2o, mp_titanic_keras, mp_titanic_tree)
plot(mp_titanic_h2o, mp_titanic_keras, mp_titanic_tree, geom = "boxplot")
vi_titanic_h2o <- variable_importance(explainer_titanic_h2o)
vi_titanic_keras <- variable_importance(explainer_titanic_h2o)
vi_titanic_tree <- variable_importance(explainer_titanic_tree)
plot(vi_titanic_h2o)
plot(vi_titanic_keras)
plot(vi_titanic_tree)
vi_titinic_h2o <- variable_importance(explainer_titanic_h2o, type="difference")
vi_titinic_keras <- variable_importance(explainer_titanic_keras, type="difference")
vi_titanic_tree <- variable_importance(explainer_titanic_tree, type="difference")
plot(vi_titinic_h2o, vi_titinic_keras, vi_titanic_tree)
vr_age_h2o  <- variable_effect(explainer_titanic_h2o, variable =  "Age")
vr_age_keras  <- variable_effect(explainer_titanic_keras, variable =  "Age")
vr_age_tree <- variable_effect(explainer_titanic_tree, variable="Age")
plot(vr_age_h2o, vr_age_keras, vr_age_tree)
vrp_age_h2o  <- variable_profile(explainer_titanic_h2o, variable =  "Age")
vrp_age_keras  <- variable_profile(explainer_titanic_keras, variable =  "Age")
vrp_age_tree <- variable_profile(explainer_titanic_tree, variable="Age")
plot(vrp_age_h2o)
plot(vrp_age_keras)
plot(vrp_age_tree)
vr_age_h2o <- variable_effect_accumulated_dependency(explainer_titanic_h2o, variables =  c("Pclass", "Fare"))
vr_age_keras <- variable_effect_accumulated_dependency(explainer_titanic_keras, variables =  c("Pclass", "Fare"))
vr_age_tree <- variable_effect_accumulated_dependency(explainer_titanic_tree, variables =  c("Pclass", "Fare"))
plot(vr_age_h2o, vr_age_keras, vr_age_tree)
breakdown_h2o <- variable_attribution(explainer_titanic_h2o, new_observation = henry, type = "break_down")
breakdown_keras <- variable_attribution(explainer_titanic_keras, new_observation = henry_keras, type = "break_down")
breakdown_tree <- variable_attribution(explainer_titanic_tree, new_observation = henry, type = "break_down")
plot(breakdown_h2o)
plot(breakdown_keras)
plot(breakdown_tree)
breakdown_h2o <- predict_parts_shap(explainer_titanic_h2o, new_observation = henry, type = "break_down")
breakdown_keras <- predict_parts_shap(explainer_titanic_keras, new_observation = henry_keras, type = "break_down")
breakdown_tree <- predict_parts_shap(explainer_titanic_tree, new_observation = henry, type = "break_down")
plot(breakdown_h2o)
plot(breakdown_keras)
plot(breakdown_tree)
set.seed(123)
pred_keras <- predict(model_keras, henry_keras)
round(as.data.frame(pred_keras)$V1)
set.seed(123)
predict_tree <- predict(model_bt_fitted, henry).pred
set.seed(123)
predict_tree <- predict(model_bt_fitted, henry)
round(predict_tree)
set.seed(123)
predict_tree <- predict(model_bt_fitted, henry)
round(predict_tree$.pred)
pred_h2o <- predict(model_h2o, henry_h2o)
as.data.frame(pred_h2o)
pred_h2o <- predict(model_h2o, henry_h2o)
as.data.frame(pred_h2o)$predict
set.seed(123)
predict_tree <- predict(model_bt_fitted, henry)
round(predict_tree$.pred)
unlink('ex05_model_explainability-assign_cache', recursive = TRUE)
unlink('ex05_model_explainability-assign_cache', recursive = TRUE)
